require 'comedi.so'

include Comedi
include SWIG

module Comedi

class Comedi_t

    def initialize(name)
	@pointer = Comedi::open(name)
	raise if @pointer.nil?
	@ios = IO.new(fileno, "r")
	raise if @ios.nil?
    end

    attr_reader :pointer, :ios
end

private

    def wrap_function(mod, name)
	defn = %Q{  def #{name}(*args)
			comedi_#{name}(*args)
		    end
		}
	mod.module_eval defn
    end

    def wrap_function_with_receiver(mod, name)
	defn = %Q{  def #{name}(*args)
			comedi_#{name}(self, *args)
		    end
		}
	mod.module_eval defn
    end

    def wrap_function_with_pointer(mod, name)
	defn = %Q{  def #{name}(*args)
			comedi_#{name}(self.pointer, *args)
		    end
		}
	mod.module_eval defn
    end

    # Comedi module methods

    names = %w{ open loglevel perror strerrno errno to_phys from_phys
		set_global_oor_behavior parse_calibration_file }

    names.each do |name|
	wrap_function(Comedi, name)
    end

    # Comedi_t instance methods

    names = %w{ close fileno get_n_subdevices get_version_code
		get_driver_name get_board_name get_subdevice_type
		find_subdevice_by_type get_read_subdevice get_write_device
		get_subdevice_flags get_n_channels range_is_chan_specific
		maxdata_is_chan_specific get_maxdata get_n_ranges
		get_range find_range get_buffer size
		get_max_buffer_size set_buffer_size trigger
		do_insnlist do_insn lock unlock data_read
		data_read_delayed data_read_hint data_write dio_config
		dio_read dio_write dio_bitfield get_cmd_src_mask
		get_cmd_generic_timed cancel command command_test poll
		set_max_buffer_size get_buffer_contents
		mark_buffer_read get_buffer_offset apply_calibration
		apply_parsed_calibration get_default_calibration_path }

    names.each do |name|
	wrap_function_with_pointer(Comedi_t, name)
    end

    # Comedi_sv_t instance methods

    names = %w{ sv_init sv_update sv_measure }

    names.each do |name|
	wrap_function_with_receiver(Comedi_sv_t, name)
    end

    # Comedi_calibration_t instance methods

    names = %w{ cleanup_calibration_file }

    names.each do |name|
	wrap_function_with_receiver(Comedi_calibration_t, name)
    end
end
