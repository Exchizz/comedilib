######################################################################
#
#    $Source$
#
#    $Revision$
#    $Date$
#
#    $Author$
#
#    Copyright (C) 2003,2004 James Steven Jenkins
#    
######################################################################

# This file is syntactic sugar for accessing the Ruby comedilib
# extension library generated by SWIG. The syntactic sugar is in
# three forms:
#
# (1)  Method names without the 'comedi_' prefix. The Comedi module
# disambiguates the namespace.
#
# (2)  Instance methods that take an explicit receiver instead of
# passing the target object as an initial pointer. For example:
# comedi_close(dev) can be written as dev.close.
#
# (3)  A pre-defined IO object and an accessor method to simplify
# reading from the file descriptor associated with the comedi device.
# Data from comedi device dev can be accessed with dev.ios.read.

require 'comedi.so'

include Comedi
include SWIG

module SWIG

# TYPE_p_comedi_t is returned by Comedi::open

class TYPE_p_comedi_t

    # create an IO object to access the comedi_t fileno

    def ios
	@ios = IO.new(fileno, 'r') if @ios.nil?
	@ios
    end
end

end

module Comedi

private

    # wrap_module_method defines Comedi module methods without the
    # unnecessary comedi_ prefix.

    def wrap_module_method(mod, name)
	mod.module_eval <<-EOF
	    def #{name}(*args)
		comedi_#{name}(*args)
	    end
	EOF
    end

    # wrap_instance_method defines instance methods for any of several
    # classes. It removes the comedi_ prefix and allows use of an
    # explicit receiver.

    def wrap_instance_method(mod, name)
	mod.module_eval <<-EOF
	    def #{name}(*args)
		comedi_#{name}(self, *args)
	    end
	EOF
    end

    # Comedi module methods

    %w{ open loglevel perror strerrno errno to_phys from_phys
	set_global_oor_behavior parse_calibration_file
    }.each do |name|
	wrap_module_method(Comedi, name)
    end

    # Comedi_t_struct instance methods

    %w{ close fileno get_n_subdevices get_version_code
	get_driver_name get_board_name get_subdevice_type
	find_subdevice_by_type get_read_subdevice get_write_device
	get_subdevice_flags get_n_channels range_is_chan_specific
	maxdata_is_chan_specific get_maxdata get_n_ranges
	get_range find_range get_buffer size
	get_max_buffer_size set_buffer_size trigger
	do_insnlist do_insn lock unlock data_read
	data_read_delayed data_read_hint data_write dio_config
	dio_read dio_write dio_bitfield get_cmd_src_mask
	get_cmd_generic_timed cancel command command_test poll
	set_max_buffer_size get_buffer_contents
	mark_buffer_read get_buffer_offset apply_calibration
	apply_parsed_calibration get_default_calibration_path
    }.each do |name|
	wrap_instance_method(SWIG::TYPE_p_comedi_t, name)
    end

    # Comedi_sv_t instance methods

    %w{ sv_init sv_update sv_measure
    }.each do |name|
	wrap_instance_method(Comedi_sv_t, name)
    end

    # Comedi_calibration_t instance methods

    %w{ cleanup_calibration_file
    }.each do |name|
	wrap_instance_method(Comedi_calibration_t, name)
    end
end
