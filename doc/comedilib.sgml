<!doctype linuxdoc public "-//LinuxDoc//DTD LinuxDoc 96//EN">

<article>
<title>Comedi Documentation
<author>David Schleef, <tt/ds@stm.lbl.gov/


<sect>Introduction

<p>
This is preliminary documentation for Comedi and Comedilib.

<sect>Installation and configuration
<p>

This section covers compiling, installing, and configuring
comedi and comedlib.


<sect1>Compiling and Installing
<p>

This section has not been written.
 
<p>
<sect1>Insmod'ding the kernel module
<p>

This section has not been written.

<p>
<sect1>Configuring comedi for your hardware
<p>


I assume that your hardware device is in your computer, and that
you know the relevant details about it, i.e., what kind of card
it is, the I/O base, the IRQ, jumper settings related to input
ranges, etc.

To tell the comedi kernel module that you have a particular device, and
some information about it, you will be running the <tt>comedi_config</tt>
command.  Perhaps you should read the man page now.

In this tutorial, I will go through the process of configuring comedi
for two devices, a National Instruments AT-MIO-16E-10
and a Data Translation DT2821-F-8DI.

The NI board is plug-and-play, and the man page tells me that I need
to configure the PnP part of the board with isapnptools.  The isapnptools
package is a little cryptic, but the concepts are simple.  Once I
learned how to use it, I settled on a /etc/isapnp.conf file that
contained the lines:


<tscreen><verb>
# ANSI string -->National Instruments, AT-MIO-16E-10<--
(CONFIGURE NIC2400/10725401 (LD 0
	(IO 0 (BASE 0x0260))
	(INT 0 (IRQ 3 (MODE +E)))
#	(DMA 0 (CHANNEL 5))
#	(DMA 1 (CHANNEL 6))
	(ACT Y)
))
</verb></tscreen>


It also contains a few lines about overall configuration and about my
sound card.  I found out after a bit of trial-and-error that the NI
board does not always work with interrupts other than IRQ 3.  YMMV.
Currently, the driver doesn't use DMA, but it may in the future, so
I commented out the DMA lines.  It is a curious fact that the device
ignores the IRQ and DMA information given here, however, I keep the
information here to remind myself that the numbers aren't arbitrary.

When I run comedi_config (as root, of course), I provide the same
information.  Since I want to have the board configured every time
I boot, I put the line

<tscreen><verb>
/usr/sbin/comedi_config /dev/comedi0 atmio-E 0x260,3
</verb></tscreen>

into <tt>/etc/rc.d/rc.local</tt>.  You can, of course, run this command at
a command prompt.  The man page tells me that the option list
is supposed to be "(I/O base),(IRQ)", so I used the same numbers
as I put in /etc/isapnp.conf, i.e., 0x260,3.

For the Data Translation board, I need to have a list of the
jumper settings.  Fortunately, I wrote them all down in the
manual -- I hope they are still correct.  However, I had to
open the case to figure out which board in the series I had.
It is a DT2821-f-8di.  The man page of comedi_config tells
me that I need to know the I/O base, IRQ, DMA 1, DMA 2.  However,
since I wrote the driver, I know that it also recognizes the
differential/single-ended and unipolar/bipolar jumpers.  As always,
the source is the final authority, and looking in module/dt282x.c
tells me that the options list is interpreted as:

<itemize>
<item>I/O base
<item>IRQ
<item>1=differential, 0=single ended
<item>ai 0=unipolar, 1=bipolar
<item>ao0 0=unipolar, 1=bipolar
<item>ao1 0=unipolar, 1=bipolar
<item>dma1
<item>dma2
</itemize>

(ai=analog input, ao=analog output.)  From this, I decide that
the appropriate options list is

<tscreen><verb>
0x200,4,,1,1,1
</verb></tscreen>

I left the differential/single-ended number blank, since the
driver already knowns (from the board name), that it is
differential.  I  also left the DMA numbers blank, since I
don't want the driver to use DMA.  (Don't want it to interfere
with my sound card -- life is full of difficult choices.)
Keep in mind that things commented in the source, but not in
the documentation are about as likely to change as the weather,
so I put good comments next to the following line when I put
it in rc.local.

<tscreen><verb>
/usr/sbin/comedi_config /dev/comedi1 dt2821-f-8di 0x200,4,,1,1,1
</verb></tscreen>

So now I think that I have my boards configured correctly.
Since data acquisition boards are not typically well-engineered,
comedi sometimes can't figure out if the board is actually there.
If it can't, it assumes you are right.  Both of these boards
are well-made, so comedi will give me an error message if it
can't find them.  The comedi kernel module, since it is a part
of the kernel, prints messages to the kernel logs, which you
can access through the command 'dmesg' or /var/log/messages.
Here is a configuration failure (from dmesg):

<tscreen><verb>
comedi0: ni_E: 0x0200 can't find board
</verb></tscreen>

When it does work, I get:

<tscreen><verb>
comedi0: ni_E: 0x0260 at-mio-16e-10 ( irq = 3 )
</verb></tscreen>

Note that it also correctly identified my board.


<p>
<sect1>Getting information from comedi
<p>


So now that we have comedi talking to the hardware, we want to
talk to comedi.  Here's some pretty low-level information --
it's sometimes useful for debugging:

<p>

<tscreen><verb>
cat /proc/comedi
</verb></tscreen>

Right now, on my computer, this command gives:

<tscreen><verb>
comedi version 0.6.4
format string
 0: atmio-E              at-mio-16e-10           7
 1: dt282x               dt2821-f-8di            4
</verb></tscreen>

This is a feature that is not well-developed yet.  Basically, it
currently tells you driver name, device name, and number of
subdevices.

In the <tt>demo/</tt> directory, there is a command called
<tt>info</tt>, which provides information about each subdevice on the
board.  The output of it is rather long, since I have 7
subdevices  (4 or fewer is common for other boards.)
Here's part of the output of the NI board (which
is on <tt>/dev/comedi0</tt>.)  ('demo/info /dev/comedi0')

<tscreen><verb>
overall info:
  version code: 0x000604
  driver name: atmio-E
  board name: at-mio-16e-10
  number of subdevices: 7
subdevice 0:
  type: 1 (unknown)
  number of channels: 16
  max data value: 4095
</verb>
...
</tscreen>

The overall info gives information about the device -- basically
the same information as /proc/comedi.

This board has 7 subdevices.  Devices are separated into
subdevices that each have a distinct purpose -- e.g., analog
input, analog output, digital input/output.  This board also
has an EEPROM and calibration DACs that are also subdevices.

Subdevice 0 is the analog input subdevice.  You would have
known this from the 'type: 1 (unknown)' line, if I've updated
demo/info recently, because it would say 'type: 1 (analog input)'
instead.  The other lines should be self-explanitory.  Comedi
has more information about the device, but demo/info doesn't
currently display this.

<p>
<sect>Individual drivers
<p>

This section contains information that is specific to each
hardware driver.  The most current information about a driver
is included in the comedi source.

<sect1>National Instruments AT-MIO E series
<p>


<sect1>Data Translation
<p>



<sect>Writing programs that use comedi and comedilib
<p>

<sect1>Your first comedi program
<p>

This example requires a card that has analog or
digital input.  Right to the source:

<tscreen><verb>
#include <stdio.h>	/* for printf() */
#include <comedilib.h>

int subdev = 0;		/* change this to your input subdevice */
int chan = 0;		/* change this to your channel */
int range = 0;		/* more on this later */
int aref = AREF_GROUND;	/* more on this later */

int main(int argc,char *argv[])
{
	comedi_t *it;
	int chan=0;
	lsampl_t data;
	
	it=comedi_open("/dev/comedi0");
	
	comedi_data_read(it,subdev,chan,range,aref,& data);
	
	printf("%d\n",data);
	
	return 0;
}
</verb></tscreen>


Should be understandable.  Open the device, get the data,
print it out.  This is basically the guts of <tt>demo/inp.c</tt>,
without error checking or fancy options.  Including all
the appropriate headers is sometimes a little tricky.
Compile it using 

<tscreen><verb>
cc tut1.c -lcomedi -o tut1
</verb></tscreen>

Hopefully it works.

A few notes:  The range variable tells comedi which gain
to use when measuring an analog voltage.  Since we don't
know (yet) which numbers are valid, or what each means,
we'll use 0, because it won't cause errors.  Likewise with
aref, which determines the analog reference used.


<p>
<sect1>Converting samples to voltages
<p>

If you selected an analog input subdevice, you should notice
that the output of <tt>tut1</tt> is a number between
0 and 4095, or 0 and 65535, depending on the number of bits
in the A/D converter.  Comedi samples are <bf>always</bf> unsigned,
with 0 representing the lowest voltage of the ADC, and 4095
the highest.  Comedi compensates for
anything else the manual for your device says.  However,
you probably prefer to have this number translated to
a voltage.  Naturally, as a good programmer, your first
question is: "How do I do this in a device-independent
manner?"

For each subdevice, the comedi kernel module keeps a
'range_type' variable.  This variable contains the number
of available ranges (i.e., gains) that you can select,
along with an offset in a list of range information
structures.  If you know the range_type variable, you
can use these macros:

   RANGE_OFFSET(range_type)
   RANGE_LENGTH(range_type)

to extract such information.  However, you want the
actual voltage information, not some integer offset
in a table.  Rather than messing with the library
internals, use the function

   ptr=comedi_get_range(comedi_file,subdevice,channel,
	range)

which returns a pointer to a comedi_range structure.
The comedi_range structure looks like

<p>
<tscreen><verb>
typedef struct{
        double min;
        double max;
        unsigned int unit;
}comedi_range;
</verb></tscreen>

As you might expect, ptr[range] is for range 'range',
which you provided to comedi_data_read() above.  'min' represents
the voltage corresponding to comedi_data_read() returning 0,
and 'max' represents comedi_data_read() returning 'maxdata',
(i.e., 4095 for 12 bit A/C converters, 65535 for 16 bit,
or, 1 for digital input -- more on this in a bit.)  The
'unit' entry tells you if min and
max refer to voltage, current, etc.

"Could it get easier?", you say.  Well, yes.  Use
the function comedi_to_phys(), which converts data
values to physical units.  Call it using something like

<tscreen><verb>
volts=comedi_to_phys(it,data,range,maxdata);
</verb></tscreen>

and the opposite

<tscreen><verb>
data=comedi_from_phys(it,volts,range,maxdata);
</verb></tscreen>

You probably noticed (and were worried) that we haven't
discussed how to determine maxdata and range_type.  Well,
you could ask the kernel this information each time you need
it, but since there are other variables, special cases,
and several subdevices to worry about, it would be nice
if the library could take care of this...  (read on...)


<p>
<sect1>Another section
<p>


In addition to providing low level routines for data
access, the comedi library provides higher-level access,
much like the standard C library provides fopen(), etc.
as a high-level (and portable) alternative to the direct
UNIX system calls open(), etc.  Similarily to fopen(),
we have comedi_open():

<p>
<tscreen><verb>
file=comedi_open("/dev/comedi0");
</verb></tscreen>

where file is of type <tt>(comedi_t *)</tt>.  This function
calls <tt>open()</tt>, like we did explicitly in a previous
section, but also fills the <tt>comedi_t</tt> structure with
lots of goodies -- information that we will need to use
soon.

Specifically, we needed to know maxdata for a specific
subdevice/channel.  How about:

<tscreen><verb>
maxdata=comedi_get_maxdata(file,subdevice,channel);
</verb></tscreen>

Wow.  How easy.  And the range type?

<tscreen><verb>
range_type=comedi_get_rangetype(file,subdevice,channel);
</verb></tscreen>

Cool.  Other information you need to know about a channel
can be gotten in a similar way.



<sect1>Your second comedi program
<p>


Actually, this is the first comedi program again, just
that we've added what we've learned.


<tscreen><verb>
#include <stdio.h>      /* for printf() */
#include <comedi.h>     /* also included by comedilib.h */
#include <comedilib.h>  /* for comedi_get() */

int subdev = 0;         /* change this to your input subdevice */
int chan = 0;           /* change this to your channel */
int range = 0;          /* more on this later */
int aref = 0;           /* more on this later */

int main(int argc,char *argv[])
{
        comedi_t *cf;
        int chan=0;
        int data;
	int maxdata,rangetype;
	double volts;

        cf=comedi_open("/dev/comedi0");

	maxdata=comedi_get_maxdata(cf,subdev,chan);

	rangetype=comedi_get_rangetype(cf,subdev,chan);

        data=comedi_get(cf->fd,subdev,chan,range,aref);

	volts=comedi_to_phys(data,rangetype,range,maxdata);

        printf("%d %g\n",data,volts);

        return 0;
}
</verb></tscreen>


By now, the <tt>comedi_read_data()</tt> line looks a little archaic, using
the UNIX file descriptor cf->fd instead of just cf.  (By the
way, somewhere in the heart of <tt>comedi_open()</tt> is the line
<tt>cf->fd=open(filename,O_RDWR)</tt>.)  Well, there isn't one good
replacement, since it highly depends on your application
what additional features you might want in a <tt>comedi_get()</tt>
replacement.  But this is the topic of a different section.


<p>
<sect>Application-specific functions
<p>

<sect1>Digital Input/Output
<p>

Many boards supported by comedi have digital input and output
channels.  Some boards allow the direction of a channel to be
specified in software.

Comedi groups digital channels into subdevice, which is a group
of digital channels that have the same characteristics.  For
example, digital output lines will be grouped into a digital
output subdevice, bidirectional digital lines will be grouped
into a digital I/O subdevice.  Thus, there can be multiple
digital subdevices on a particular board.


<sect1>Timed Input/Output
<p>

<p>
<sect1>Slowly-varying inputs
<p>


Sometimes, your input channels change slowly enough that
you are able to average many sucessive input values to get a
more accurate measurement of the actual value.  In general,
the more samples you average, the better your estimate
gets, roughly by a factor of sqrt(number_of_samples).
Obviously, there are limitations to this:

<p>
<itemize>
<item>
you are ultimately limited by "spurious free dynamic range"

<item>
you need to have _some_ noise on the input channel,
otherwise you will be averaging the same number N times.

<item>
the more noise you have, the greater your SFDR, but it
takes many more samples to compensate for the increased
noise

<item>
if you feel the need to average samples for 2 seconds,
your signal will need to be _very_ slowly-varying, i.e.,
not varying more than your target uncertainty for the
entire 2 seconds.

</itemize>

As you might have guessed, the comedi library has functions
to help you in your quest to accurately measure slowly varying
inputs.  I use these functions to measure thermocouple voltages
-- actually, the library functions came from a section of code
that was previously part of the thermocouple reading program.

The comedi self-calibration utility also uses these functions.
On some hardware, it is possible to tell it to measure an
internal stable voltage reference, which is typically going
to be very slowly varying -- on the kilosecond time scale
or more.  So it is reasonable to measure millions of samples,
to get a very accurate measurement of the A/D converter output
value that corresponds to the voltage reference.  Sometimes,
however, this is overkill, since there is no need to
perform a part-per-million calibration to a standard that
is only accurate to part-per-thousand.



<p>

<sect>Comedilib reference

<p>
Reference of structures:

<tscreen><verb>
typedef struct comedi_t_struct comedi_t;

typedef struct{
	double min;
	double max;
	unsigned int unit;
}comedi_range;

typedef struct comedi_sv_struct{
	comedi_t *dev;
	unsigned int subdevice;
	unsigned int chan;

	/* range policy */
	int range;
	int aref;
	
	/* number of measurements to average (for ai) */
	int n;

	lsampl_t maxdata;
}comedi_sv_t;
</verb></tscreen>

<sect1>comedi_loglevel()

<p>

int comedi_loglevel(int loglevel);

<p>

This function affects the output of debugging and error messages
from comedlib.  By increasing the loglevel, additional debugging
information will be printed.  This function returns the previous
loglevel.  Some debugging information will only be printed if
comedilib was compiled with this debugging information included.
The loglevel can also be affected by the environment
variable COMEDI_LOGLEVEL.  The meaning of the loglevels is as
follows:

COMEDILIB_LOGLEVEL=0

Comedilib prints nothing.

COMEDILIB_LOGLEVEL=1  (default)

Comedilib only prints error messages when there is a
self-consistency error.

COMEDILIB_LOGLEVEL=2

Comedilib prints an error message whenever an invalid
parameter is passed to comedilib.

COMEDILIB_LOGLEVEL=3

Comedilib prints an error message whenever an error is generated
in the comedilib library or is generated in the C library when
called by comedilib.

COMEDILIB_LOGLEVEL=4

Comedilib prints a lot of debugging messages.

<p>

<sect1>comedi_open

<p>

comedi_t *comedi_open(char *fn);

Opens a comedi device specified by the filename fn.  Returns NULL
on error.  Returns a handle that is given as a parameter to other
comedilib functions.

You are not supposed to have access to the structure comedi_t.

void comedi_close(comedi_t *it);

Closes a device previously opened by comedi_open().

void comedi_perror(const char *s);
char *comedi_strerror(int errnum);
int comedi_errno(void);

When a comedilib function fails, it usually returns -1 or
NULL, depending on the return type.  An internal library
variable stores an error number, which can be retrieved with
<tt>comedi_errno()</tt>.  This error number can be
converted to a human-readable form by the functions
<tt>comedi_perror()</tt> and <tt>comedi_strerror()</tt>.

These functions are intended to mimic the behavior of the
standard C library functions <tt>perror()</tt>,
<tt>strerror</tt>, and <tt>errno()</tt>.  In particular,
comedilib functions sometimes return an error that is generated
inside the C library; the comedi error message in this case
is the same as the C library.

The function <tt>comedi_perror()</tt> prints an error
message to stderr.  The error message consists of the
argument string, a colon, a space, a description of the error
condition, and a new line.

The function <tt>comedi_strerror()</tt> returns a pointer to a
character string
describing the comedilib error <tt>errnum</tt>.  The persistence
of the returned pointer is undefined, and should not be trusted
after the next comedilib call.  An unrecognized error number will
return a pointer to the string "undefined error", or similar.

The function <tt>comedi_errno()</tt>
returns an integer describing the most recent comedilib error.  This
integer may be used as the <tt>errnum</tt> parameter for
<tt>comedi_strerror()</tt>.

<p>
<sect1>comedi_fileno()

<p>

int comedi_fileno(comedi_t *it);

The function <tt>comedi_fileno</tt>
returns the integer descriptor for the handle <tt>it</tt>.  If
<tt>it</tt> is an invalid <tt>comedi_t</tt> pointer, the function
returns -1 and sets the appropriate comedilib error value.


<p>
<sect1>comedi_get_n_subdevices()
<p>

int comedi_get_n_subdevices(comedi_t *it);

The function <tt>comedi_get_n_subdevices</tt> returns the
number of subdevices associated with the comedi descriptor
<tt>it</tt>, or -1 if there is an error.

<p>
<sect1>comedi_get_version_code()
<p>

int comedi_get_version_code(comedi_t *it);

The function <tt>comedi_get_version_code()</tt> returns the
version code of the currently running comedi module.  The version
code is of the form 0x010203, which is the version code for
version 1.2.3.

<p>
<sect1>comedi_get_driver_name()
<p>

char *comedi_get_driver_name(comedi_t *it);

The function <tt>comedi_get_driver_name</tt> returns a pointer
to a string containing the name of the driver being used by comedi
for the comedi device represented by <tt>it</tt>.  This pointer is
valid until the comedi descriptor <tt>it</tt> is closed.  This
function returns NULL if there is an error.

<p>
<sect1>comedi_get_board_name()
<p>

char *comedi_get_board_name(comedi_t *it);

The function <tt>comedi_get_board_name</tt> returns a pointer
to a string containing the name of the device.  This pointer is
valid until the comedi descriptor <tt>it</tt> is closed.  This
function returns NULL if there is an error.

<p>
<sect1>comedi_get_subdevice_type()
<p>

int comedi_get_subdevice_type(comedi_t *it,unsigned int subdevice);

The function <tt>comedi_get_subdevice_type()</tt> returns an
integer describing the type of subdevice that belongs to the comedi
device <tt>it</tt> and has the index <tt>subdevice</tt>.  The
function returns -1 is there is an error.

Valid subdevice types are:

<itemize>
<item><tt>COMEDI_SUBD_UNUSED</tt>
Subdevice has no functionality, i.e., a place-holder.
<item><tt>COMEDI_SUBD_AI</tt>	Analog input
<item><tt>COMEDI_SUBD_AO</tt>	Analog output
<item><tt>COMEDI_SUBD_DI</tt>	Digital input
<item><tt>COMEDI_SUBD_DO</tt>	Digital output
<item><tt>COMEDI_SUBD_DIO</tt>
Digital input/output.  Channels are configurable as to whether they
are inputs or outputs.
<item><tt>COMEDI_SUBD_COUNTER</tt>	Counter
<item><tt>COMEDI_SUBD_TIMER</tt>	Timer
<item><tt>COMEDI_SUBD_MEMORY</tt>
Memory, e.g., EEPROM or dual-ported RAM
<item><tt>COMEDI_SUBD_CALIB</tt>
Calibration DACs
<item><tt>COMEDI_SUBD_PROC</tt>
Processor or DSP
</itemize>


<p>
<sect1>comedi_find_subdevice_by_type()
<p>

int comedi_find_subdevice_by_type(comedi_t *it,int type,unsigned int start_subdevice)

The function <tt>comedi_find_subdevice_by_type</tt> tries to
locate a subdevice belonging to comedi device <tt>it</tt>,
having type <tt>type</tt>, starting with the subdevice
<tt>start_subdevice</tt>.  If it finds the requested subdevice,
it returns its index.  If it does not locate the requested
subdevice, it returns -1 and sets the comedi error number to
"subdevice not found".  If there is an error, the function
returns -1 and sets the appropriate error.

For subdevice types, see the manual page for the function
<tt>comedi_get_subdevice_type()</tt>.

<p>
<sect1>comedi_get_n_channels()
<p>


int comedi_get_n_channels(comedi_t *it,unsigned int subdevice);

The function <tt>comedi_get_n_channels()</tt> returns the number
of channels of the subdevice belonging to the comedi device <tt>it</tt>
and having index <tt>subdevice</tt>.  This function returns -1 on error.

<p>
<sect1>comedi_get_maxdata()
<p>

lsampl_t comedi_get_maxdata(comedi_t *it,unsigned int subdevice,unsigned int chan);

The function <tt>comedi_get_maxdata()</tt> returns the maximum
valid data value for channel <tt>chan</tt> of subdevice
<tt>subdevice</tt> belonging to the comedi device <tt>it</tt>
This function returns 0 on error.

<p>
<sect1>comedi_get_rangetype()
<p>

int comedi_get_rangetype(comedi_t *it,unsigned int subdevice,unsigned int chan);

The function <tt>comedi_get_rangetype()</tt> returns an integer
that represents the number of range specifications available for a
particular channel, as well as a conversion table to convert sample
values to/from physical units.  The macro
<tt>RANGE_LENGTH(rangetype)</tt>
can be used to determine the number of range specifications for a given
range type.

<p>
<sect1>comedi_get_range()
<p>

comedi_range * comedi_get_range(comedi_t *it,unsigned int subdevice,unsigned int chan,unsigned int range);

The function <tt>comedi_get_range</tt> returns a pointer to a
comedi_range structure that contains information that can be used to
convert sample values to or from physical units.  The pointer is valid
until the comedi device <tt>it</tt> is closed.  If there is an
error, NULL is returned.

<p>
<sect1>comedi_trigger()
<p>

int comedi_trigger(comedi_t *it,comedi_trig *trig);

The function <tt>comedi_trigger()</tt> instructs comedi to
perform the command specified by the trigger structure
<tt>trig</tt>.  Results depend on the particular command
being issued.  If there is an error, -1 is returned.

Complete information about comedi commands is given in the
manual page comedi(8).

double comedi_to_phys(lsampl_t data,comedi_range *rng,lsampl_t maxdata);
lsampl_t comedi_from_phys(double data,comedi_range *rng,lsampl_t maxdata);

The functions <tt>comedi_to_phys()</tt> and
<tt>comedi_from_phys()</tt> convert sample values to/from physical
units.  The parameter <tt>rng</tt> represents the conversion
information to use, and the parameter <tt>maxdata</tt> represents
the maximum possible data value for the channel that the data was read/
will be written to.


<p>
<sect1>comedi_data_read()
<p>

int comedi_data_read(comedi_t *it,unsigned int subd,unsigned int chan,
	unsigned int range,unsigned int aref,lsampl_t *data);
int comedi_data_write(comedi_t *it,unsigned int subd,unsigned int chan,
	unsigned int range,unsigned int aref,lsampl_t data);

These functions read or write a single sample on the channel that
is specified by the comedi device <tt>it</tt>, the
subdevice <tt>subd</tt>, and the channel <tt>chan</tt>.
For the operation,
the device is configured to use range specification
<tt>range</tt> and (if appropriate) analog reference type
<tt>aref</tt>.  Analog reference types that are not supported
by the device are silently ignored.

The function <tt>comedi_data_read()</tt> reads one data value from
the specified channel and places the 
data value that is read in the location pointed to by
<tt>data</tt>.

The function <tt>comedi_data_write()</tt> writes the data value
specified by the argument <tt>data</tt> to
the specified channel.

On sucess, these functions return 0.  If there is an error, -1 is
returned.

Valid analog reference numbers are:

<itemize>
<item>AREF_GROUND	Reference to analog ground
<item>AREF_COMMON	Reference to analog common
<item>AREF_DIFF		Differential reference
<item>AREF_OTHER	Board-specific meaning
</itemize>

Valid data values used by these functions is an unsigned integer
less than or equal to <tt>maxdata</tt>, which is channel-dependent.
Conversion of these data values to physical units can be performed
by <tt>comedi_to_phys()</tt> and <tt>comedi_from_phys()</tt>.


<p>
<sect1>comedi_sv_init()
<p>

<tscreen><verb>
int comedi_sv_init(comedi_sv_t *it,comedi_t *dev,unsigned int subd,unsigned int chan);
int comedi_sv_update(comedi_sv_t *it);
int comedi_sv_measure(comedi_sv_t *it,double *data);
</verb></tscreen>

The special functions <tt>comedi_sv_*()</tt> are designed to
make it easy to accurately measure slowly varying analog inputs.
A slowly
varying input is one that is effectively constant over the course
of approximately 100 A/D conversions.  However, since these
conversions can sometimes be pre-empted by scheduling, for most
purposes, a slowly varying signal should be effectively constant
for greater than 20 ms (the default Linux timeslice).

By averaging many A/D conversions of a relatively constant
signal, it is possible to get a better measurement of the signal
than a single A/D conversion.  In general, the uncertainty of the
measurement decreases as the square root of the number of samples.
This is limited by the rate that which the signal varies, and
ultimately by the spurious free dynamic range of the A/D converter.


<p>
<sect1>comedi_get_timer()
<p>

<tscreen><verb>
int comedi_get_timer(comedi_t *it,unsigned int subdev,double freq,unsigned int *trigvar,
	double *actual_freq);
</verb></tscreen>


<p>

</article>

