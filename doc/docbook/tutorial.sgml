<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook V3.1//EN">


<section>
<title>
Writing programs that use comedi and comedilib
</title>

<section>
<title>
Your first comedi program
</title>

<para>
This example requires a card that has analog or
digital input.  Right to the source:
</para>

<programlisting>
#include &lt;stdio.h&gt;	/* for printf() */
#include &lt;comedilib.h&gt;

int subdev = 0;		/* change this to your input subdevice */
int chan = 0;		/* change this to your channel */
int range = 0;		/* more on this later */
int aref = AREF_GROUND;	/* more on this later */

int main(int argc,char *argv[])
{
	comedi_t *it;
	lsampl_t data;

	it=comedi_open("/dev/comedi0");
	
	comedi_data_read(it,subdev,chan,range,aref,&amp;data);
	
	printf("%d\n",data);
	
	return 0;
}
</programlisting>

<para>
Should be understandable: open the device, get the data,
print it out.  This is basically the guts of <filename>demo/inp.c</filename>,
without error checking or fancy options.
Compile it using
</para>

<screen>
cc tut1.c -lcomedi -o tut1
</screen>

<para>
A few notes:  The range variable tells comedi which gain
to use when measuring an analog voltage.  Since we don't
know (yet) which numbers are valid, or what each means,
we'll use 0, because it won't cause errors.  Likewise with
aref, which determines the analog reference used.
</para>
</section>


<section>
<title>
Converting samples to voltages
</title>

<para>
If you selected an analog input subdevice, you probably noticed
that the output of <command>tut1</command> is a number between
0 and 4095, or 0 and 65535, depending on the number of bits
in the A/D converter.  Comedi samples are <emphasis>always</emphasis>
unsigned,
with 0 representing the lowest voltage of the ADC, and 4095
the highest.  Comedi compensates for
anything else the manual for your device says.  However,
you probably prefer to have this number translated to
a voltage.  Naturally, as a good programmer, your first
question is: "How do I do this in a device-independent
manner?"
</para>

<para>
Most devices give you a choice of gain and unipolar/bipolar
input, and Comedi allows you to select which of these to
use.  This parameter is called the "range parameter", since
it specifies the "input range" for analog input (or "output range"
for analog output.)  The range parameter represents both the gain
and the unipolar/bipolar aspects.
</para>

<para>
Comedi keeps the number of available ranges and the largest
sample value for each subdevice/channel combination.  (Some
devices allow different input/output ranges for different
channels in a subdevice.)
</para>

<para>
The largest sample value can be found using the function:
</para>

<programlisting>
comedi_get_maxdata()
</programlisting>

<para>
The number of available ranges can be found using the function:
</para>

<programlisting>
comedi_get_n_ranges()
</programlisting>

<para>
For each value of the range parameter for a particular
subdevice/channel, you can get range information using the
function:
</para>

<programlisting>
   ptr=comedi_get_range(comedi_file,subdevice,channel,
	range);
</programlisting>

<para>
which returns a pointer to a comedi_range structure.
The comedi_range structure looks like
</para>

<programlisting>
typedef struct{
        double min;
        double max;
        unsigned int unit;
}comedi_range;
</programlisting>

<para>
The structure element 'min' represents
the voltage corresponding to comedi_data_read() returning 0,
and 'max' represents comedi_data_read() returning 'maxdata',
(i.e., 4095 for 12 bit A/C converters, 65535 for 16 bit,
or, 1 for digital input -- more on this in a bit.)  The
'unit' entry tells you if min and
max refer to voltage, current, etc.
</para>

<para>
"Could it get easier?", you say.  Well, yes.  Use
the function comedi_to_phys(), which converts data
values to physical units.  Call it using something like
</para>

<programlisting>
volts=comedi_to_phys(it,data,range,maxdata);
</programlisting>

<para>
and the opposite
</para>

<programlisting>
data=comedi_from_phys(it,volts,range,maxdata);
</programlisting>

</section>

<section>
<title>
Another section
</title>


<para>
In addition to providing low level routines for data
access, the comedi library provides higher-level access,
much like the standard C library provides fopen(), etc.
as a high-level (and portable) alternative to the direct
UNIX system calls open(), etc.  Similarily to fopen(),
we have comedi_open():
</para>

<programlisting>
file=comedi_open("/dev/comedi0");
</programlisting>

<para>
where file is of type (comedi_t *).  This function
calls <function>open()</function>, like we did explicitly in a previous
section, but also fills the comedi_t structure with
lots of goodies -- information that we will need to use
soon.  
</para>

<para>
Specifically, we needed to know maxdata for a specific
subdevice/channel.  How about:
</para>

<programlisting>
maxdata=comedi_get_maxdata(file,subdevice,channel);
</programlisting>

<para>
Wow.  How easy.  And the range type?
</para>

<programlisting>
range_type=comedi_get_rangetype(file,subdevice,channel);
</programlisting>

<para>
Cool.  Other information you need to know about a channel
can be gotten in a similar way.
</para>

</section>


<section>
<title>
Your second comedi program
</title>


<para>
Actually, this is the first comedi program again, just
that we've added what we've learned.
</para>


<programlisting>
#include &lt;stdio.h&gt;      /* for printf() */
#include &lt;comedi.h&gt;     /* also included by comedilib.h */
#include &lt;comedilib.h&gt;  /* 'cuz we're using comedilib */

int subdev = 0;         /* change this to your input subdevice */
int chan = 0;           /* change this to your channel */
int range = 0;          /* more on this later */
int aref = 0;           /* more on this later */

int main(int argc,char *argv[])
{
        comedi_t *cf;
        int chan=0;
        lsampl_t data;
	int maxdata,rangetype;
	double volts;

        cf=comedi_open("/dev/comedi0");

	maxdata=comedi_get_maxdata(cf,subdev,chan);

	rangetype=comedi_get_rangetype(cf,subdev,chan);

        comedi_data_read(cf->fd,subdev,chan,range,aref,&amp;data);

	volts=comedi_to_phys(data,rangetype,range,maxdata);

        printf("%d %g\n",data,volts);

        return 0;
}
</programlisting>

</section>
</section>

